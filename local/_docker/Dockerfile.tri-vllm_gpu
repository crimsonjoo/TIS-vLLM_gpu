# Ubuntu 22.04를 기반 이미지로 사용
FROM nvcr.io/nvidia/tritonserver:25.02-vllm-python-py3

# Build arguments for PyPI credentials
ARG PYPI_USERNAME
ARG PYPI_PASSWORD

# 환경 변수 설정
ENV DEBIAN_FRONTEND=noninteractive

# 기본 패키지 설치 및 SSH 설정
RUN apt-get update && \
    apt-get install -y \
    libgl1 \
    tmux \
    openssh-server \
    python3 \
    python3-pip \
    git \
    nano \
    vim \
    tini \
    # 시각화 라이브러리 의존성 추가
    python3-tk \
    # 추가 시스템 패키지
    curl \
    wget \
    && rm -rf /var/lib/apt/lists/*

# SSH 설정
RUN mkdir /var/run/sshd && \
    echo 'root:root' | chpasswd && \
    sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config && \
    sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config && \
    sed -i 's/#PubkeyAuthentication yes/PubkeyAuthentication yes/' /etc/ssh/sshd_config && \
    ssh-keygen -A

# Python pip 설정 및 패키지 설치
## pip 업그레이드 시도 없이 직접 필요한 패키지 설치
RUN mkdir -p /root/.pip && \
    python3 -m pip install --no-cache-dir \
    pyyaml \
    numpy \
    "tritonclient[all]" \
    fastapi \
    uvicorn \
    pydantic \
    requests \
    # 시각화 라이브러리 추가
    pandas \
    matplotlib \
    seaborn \
    # Triton CLI 설치
    triton-cli \
    # GenAI Perf Analyzer 설치
    genai-perf \
    --break-system-packages

# Triton CLI 설치 확인 및 설정
RUN echo "Triton CLI 버전 확인" && \
    triton --version || echo "Triton CLI 설치 필요" && \
    # GenAI Perf Analyzer 설치 확인
    echo "GenAI Perf Analyzer 버전 확인" && \
    genai-perf --version || echo "GenAI Perf Analyzer 설치 필요"

# /tmp 디렉토리 생성 및 권한 설정
RUN mkdir -p /tmp && chmod 1777 /tmp

# Codeium Windsurf 메모리 디렉토리 생성
# 이 디렉토리는 AI 어시스턴트의 설정과 메모리를 저장하는 용도로 사용됩니다
RUN mkdir -p /root/.codeium/windsurf/memories

# global_rules.md 파일을 컨테이너 내부로 복사
# 이 파일은 AI 어시스턴트의 동작 규칙을 정의합니다
COPY ./local/_docker/global_rules.md /root/.codeium/windsurf/memories/

# 애플리케이션 디렉토리 설정
WORKDIR /workspace

# container 내부의 모든 파일들을 그대로 /workspace안에 복사
COPY ./container/ /workspace/

# 포트 노출 (SSH + 추가 서비스)
EXPOSE 22 5000 8000 8001 8002 42435

# 시작 스크립트 생성
COPY ./local/_docker/entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

# 시작 명령 설정
ENTRYPOINT ["/usr/bin/tini", "--", "/entrypoint.sh"]
